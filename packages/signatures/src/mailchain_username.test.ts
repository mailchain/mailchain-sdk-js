import {
	AliceED25519PublicKey,
	BobED25519PublicKey,
	AliceED25519PrivateKey,
	BobED25519PrivateKey,
} from '@mailchain/crypto/ed25519/test.const';
import { AliceSECP256K1PublicKey, AliceSECP256K1PrivateKey } from '@mailchain/crypto/secp256k1/test.const';
import { ErrorUnsupportedKey } from '@mailchain/crypto';
import { signMailchainUsername, verifyMailchainUsername } from './mailchain_username';

describe('VerifyMailchainUsername()', () => {
	const tests = [
		{
			name: `valid-sig-ed25519-alice`,
			args: {
				key: AliceED25519PublicKey,
				message: Buffer.from('alice', 'utf-8'),
				signature: new Uint8Array([
					0x50, 0x2a, 0x4d, 0x32, 0x20, 0x94, 0x45, 0xda, 0xaf, 0x82, 0xc2, 0xfd, 0x73, 0xa9, 0x83, 0xeb, 0xd,
					0xfb, 0x45, 0x92, 0x9b, 0x90, 0x46, 0xbb, 0x7c, 0x1d, 0xcd, 0x6d, 0xa7, 0x87, 0x8d, 0x6f, 0x4c,
					0x45, 0x53, 0xd9, 0x2, 0xf8, 0xa6, 0x12, 0xae, 0x6f, 0x46, 0xd3, 0x4f, 0x75, 0x59, 0x30, 0xa8, 0xd1,
					0xaa, 0xcb, 0xd, 0xf0, 0x5, 0xff, 0xc1, 0xb4, 0x7e, 0xe7, 0xe8, 0x3d, 0x4f, 0xc,
				]),
			},
			expected: true,
			shouldThrow: false,
		},
		{
			name: `valid-sig-ed25519-bob`,
			args: {
				key: BobED25519PublicKey,
				message: Buffer.from('bob', 'utf-8'),
				signature: new Uint8Array([
					0xfe, 0xac, 0xe1, 0x62, 0xd7, 0x82, 0xae, 0xd, 0xff, 0x85, 0x9f, 0xe2, 0xc, 0x2a, 0xdd, 0xbe, 0xf5,
					0xbf, 0x3c, 0xd4, 0x8f, 0x49, 0x5c, 0x45, 0x97, 0x7f, 0x87, 0x4f, 0xf5, 0xcf, 0x50, 0x67, 0xac,
					0x20, 0x88, 0xf9, 0xc, 0x62, 0x68, 0xb9, 0xcf, 0x51, 0x7c, 0x51, 0xc4, 0x93, 0xae, 0xdb, 0x5b, 0x10,
					0xfd, 0x53, 0x64, 0x90, 0x87, 0x83, 0x9f, 0x87, 0xe8, 0x8a, 0x32, 0x38, 0x84, 0xd,
				]),
			},
			expected: true,
			shouldThrow: false,
		},
		{
			name: `incorrect-sig-ed25519-alice`,
			args: {
				key: AliceED25519PublicKey,
				message: Buffer.from('not-alice', 'utf-8'),
				signature: new Uint8Array([
					0x50, 0x2a, 0x4d, 0x32, 0x20, 0x94, 0x45, 0xda, 0xaf, 0x82, 0xc2, 0xfd, 0x73, 0xa9, 0x83, 0xeb, 0xd,
					0xfb, 0x45, 0x92, 0x9b, 0x90, 0x46, 0xbb, 0x7c, 0x1d, 0xcd, 0x6d, 0xa7, 0x87, 0x8d, 0x6f, 0x4c,
					0x45, 0x53, 0xd9, 0x2, 0xf8, 0xa6, 0x12, 0xae, 0x6f, 0x46, 0xd3, 0x4f, 0x75, 0x59, 0x30, 0xa8, 0xd1,
					0xaa, 0xcb, 0xd, 0xf0, 0x5, 0xff, 0xc1, 0xb4, 0x7e, 0xe7, 0xe8, 0x3d, 0x4f, 0xc,
				]),
			},
			expected: false,
			shouldThrow: false,
		},
		{
			name: `incorrect-sig-ed25519-bob`,
			args: {
				key: BobED25519PublicKey,
				message: Buffer.from('not-bob', 'utf-8'),
				signature: new Uint8Array([
					0xfe, 0xac, 0xe1, 0x62, 0xd7, 0x82, 0xae, 0xd, 0xff, 0x85, 0x9f, 0xe2, 0xc, 0x2a, 0xdd, 0xbe, 0xf5,
					0xbf, 0x3c, 0xd4, 0x8f, 0x49, 0x5c, 0x45, 0x97, 0x7f, 0x87, 0x4f, 0xf5, 0xcf, 0x50, 0x67, 0xac,
					0x20, 0x88, 0xf9, 0xc, 0x62, 0x68, 0xb9, 0xcf, 0x51, 0x7c, 0x51, 0xc4, 0x93, 0xae, 0xdb, 0x5b, 0x10,
					0xfd, 0x53, 0x64, 0x90, 0x87, 0x83, 0x9f, 0x87, 0xe8, 0x8a, 0x32, 0x38, 0x84, 0xd,
				]),
			},
			expected: false,
			shouldThrow: false,
		},
		{
			name: `unsupported-key`,
			args: {
				key: AliceSECP256K1PublicKey,
				message: Buffer.from('alice', 'utf-8'),
				signature: new Uint8Array([
					0xfe, 0xac, 0xe1, 0x62, 0xd7, 0x82, 0xae, 0xd, 0xff, 0x85, 0x9f, 0xe2, 0xc, 0x2a, 0xdd, 0xbe, 0xf5,
					0xbf, 0x3c, 0xd4, 0x8f, 0x49, 0x5c, 0x45, 0x97, 0x7f, 0x87, 0x4f, 0xf5, 0xcf, 0x50, 0x67, 0xac,
					0x20, 0x88, 0xf9, 0xc, 0x62, 0x68, 0xb9, 0xcf, 0x51, 0x7c, 0x51, 0xc4, 0x93, 0xae, 0xdb, 0x5b, 0x10,
					0xfd, 0x53, 0x64, 0x90, 0x87, 0x83, 0x9f, 0x87, 0xe8, 0x8a, 0x32, 0x38, 0x84, 0xd,
				]),
			},
			expected: false,
			shouldThrow: new ErrorUnsupportedKey('secp256k1'),
		},
	];
	test.each(tests)('$name', async (test) => {
		const target = verifyMailchainUsername(test.args.key, test.args.signature, test.args.message);
		if (test.shouldThrow) {
			expect.assertions(1);
			return target.catch((e) => expect(e).toEqual(test.shouldThrow));
		}
		return target.then((actual) => {
			expect(actual).toEqual(test.expected);
		});
	});
});

describe('SignMailchainUsername()', () => {
	const tests = [
		{
			name: `ed25519-alice`,
			args: {
				key: AliceED25519PrivateKey,
				message: Buffer.from('alice', 'utf-8'),
			},
			expected: new Uint8Array([
				0x50, 0x2a, 0x4d, 0x32, 0x20, 0x94, 0x45, 0xda, 0xaf, 0x82, 0xc2, 0xfd, 0x73, 0xa9, 0x83, 0xeb, 0xd,
				0xfb, 0x45, 0x92, 0x9b, 0x90, 0x46, 0xbb, 0x7c, 0x1d, 0xcd, 0x6d, 0xa7, 0x87, 0x8d, 0x6f, 0x4c, 0x45,
				0x53, 0xd9, 0x2, 0xf8, 0xa6, 0x12, 0xae, 0x6f, 0x46, 0xd3, 0x4f, 0x75, 0x59, 0x30, 0xa8, 0xd1, 0xaa,
				0xcb, 0xd, 0xf0, 0x5, 0xff, 0xc1, 0xb4, 0x7e, 0xe7, 0xe8, 0x3d, 0x4f, 0xc,
			]),
			shouldThrow: false,
		},
		{
			name: `ed25519-bob`,
			args: {
				key: BobED25519PrivateKey,
				message: Buffer.from('bob', 'utf-8'),
			},
			expected: new Uint8Array([
				0xfe, 0xac, 0xe1, 0x62, 0xd7, 0x82, 0xae, 0xd, 0xff, 0x85, 0x9f, 0xe2, 0xc, 0x2a, 0xdd, 0xbe, 0xf5,
				0xbf, 0x3c, 0xd4, 0x8f, 0x49, 0x5c, 0x45, 0x97, 0x7f, 0x87, 0x4f, 0xf5, 0xcf, 0x50, 0x67, 0xac, 0x20,
				0x88, 0xf9, 0xc, 0x62, 0x68, 0xb9, 0xcf, 0x51, 0x7c, 0x51, 0xc4, 0x93, 0xae, 0xdb, 0x5b, 0x10, 0xfd,
				0x53, 0x64, 0x90, 0x87, 0x83, 0x9f, 0x87, 0xe8, 0x8a, 0x32, 0x38, 0x84, 0xd,
			]),
			shouldThrow: false,
		},
		{
			name: `unsupported-key`,
			args: {
				key: AliceSECP256K1PrivateKey,
				message: Buffer.from('alice', 'utf-8'),
			},
			expected: null,
			shouldThrow: new ErrorUnsupportedKey('secp256k1'),
		},
	];
	test.each(tests)('$name', async (test) => {
		const target = signMailchainUsername(test.args.key, test.args.message);
		if (test.shouldThrow) {
			expect.assertions(1);
			return target.catch((e) => expect(e).toEqual(test.shouldThrow));
		}
		return target.then((actual) => {
			expect(actual).toEqual(test.expected);
		});
	});
});
