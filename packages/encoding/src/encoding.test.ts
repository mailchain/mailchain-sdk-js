import { EncodingType, EncodingTypes } from './consts';
import { Decode, Encode } from './encoding';

describe('Encode', () => {
	const tests = [
		{
			name: '0x-hex',
			encoding: EncodingTypes.Hex0xPrefix,
			input: new Uint8Array([
				0x56, 0x2, 0xea, 0x95, 0x54, 0xb, 0xee, 0x46, 0xd0, 0x3b, 0xa3, 0x35, 0xee, 0xd6, 0xf4, 0x9d, 0x11,
				0x7e, 0xab, 0x95, 0xc8, 0xab, 0x8b, 0x71, 0xba, 0xe2, 0xcd, 0xd1, 0xe5, 0x64, 0xa7, 0x61,
			]),
			expected: '0x5602ea95540bee46d03ba335eed6f49d117eab95c8ab8b71bae2cdd1e564a761',
			shouldThrow: false,
		},
		{
			name: 'hex',
			encoding: EncodingTypes.Hex,
			input: new Uint8Array([
				0x56, 0x2, 0xea, 0x95, 0x54, 0xb, 0xee, 0x46, 0xd0, 0x3b, 0xa3, 0x35, 0xee, 0xd6, 0xf4, 0x9d, 0x11,
				0x7e, 0xab, 0x95, 0xc8, 0xab, 0x8b, 0x71, 0xba, 0xe2, 0xcd, 0xd1, 0xe5, 0x64, 0xa7, 0x61,
			]),
			expected: '5602ea95540bee46d03ba335eed6f49d117eab95c8ab8b71bae2cdd1e564a761',
			shouldThrow: false,
		},
		{
			name: 'base58',
			encoding: EncodingTypes.Base58,
			input: new Uint8Array([
				0x9, 0x86, 0xc6, 0x71, 0x43, 0xad, 0x96, 0x6f, 0xa5, 0x79, 0xc9, 0x1b, 0x30, 0xc6, 0x7f, 0x95, 0xe7,
				0x4b, 0xcc, 0xe3, 0xc5, 0xec, 0xb9, 0x5c, 0x96, 0xbf, 0xb5, 0x82, 0x87, 0x65, 0x64, 0xe4, 0x9c, 0x8,
				0x3f, 0x1c,
			]),
			expected: '5CLmNK8f16nagFeF2h3iNeeChaxPiAsJu7piNYJgdPpmaRzPD',
			shouldThrow: false,
		},
		{
			name: 'base64-url',
			encoding: EncodingTypes.Base64,
			input: new Uint8Array([
				0x72, 0x3c, 0xaa, 0x23, 0xa5, 0xb5, 0x11, 0xaf, 0x5a, 0xd7, 0xb7, 0xef, 0x60, 0x76, 0xe4, 0x14, 0xab,
				0x7e, 0x75, 0xa9, 0xdc, 0x91, 0xe, 0xa6, 0xe, 0x41, 0x7a, 0x2b, 0x77, 0xa, 0x56, 0x71,
			]),
			expected: 'cjyqI6W1Ea9a17fvYHbkFKt-danckQ6mDkF6K3cKVnE',
			shouldThrow: false,
		},
		{
			name: 'unknown',
			encoding: 'unknown',
			input: new Uint8Array([
				0x9, 0x86, 0xc6, 0x71, 0x43, 0xad, 0x96, 0x6f, 0xa5, 0x79, 0xc9, 0x1b, 0x30, 0xc6, 0x7f, 0x95, 0xe7,
				0x4b, 0xcc, 0xe3, 0xc5, 0xec, 0xb9, 0x5c, 0x96, 0xbf, 0xb5, 0x82, 0x87, 0x65, 0x64, 0xe4, 0x9c, 0x8,
				0x3f, 0x1c,
			]),
			expected: '',
			shouldThrow: true,
		},
	];
	test.each(tests)('$name', async (test) => {
		if (test.shouldThrow) {
			expect(() => {
				Encode(test.encoding as EncodingType, test.input);
			}).toThrow();
		} else {
			expect(Encode(test.encoding as EncodingType, test.input)).toEqual(test.expected);
		}
	});
});

describe('Decode', () => {
	const tests = [
		{
			name: '0x-hex',
			encoding: EncodingTypes.Hex0xPrefix,
			input: '0x5602ea95540bee46d03ba335eed6f49d117eab95c8ab8b71bae2cdd1e564a761',
			expected: new Uint8Array([
				0x56, 0x2, 0xea, 0x95, 0x54, 0xb, 0xee, 0x46, 0xd0, 0x3b, 0xa3, 0x35, 0xee, 0xd6, 0xf4, 0x9d, 0x11,
				0x7e, 0xab, 0x95, 0xc8, 0xab, 0x8b, 0x71, 0xba, 0xe2, 0xcd, 0xd1, 0xe5, 0x64, 0xa7, 0x61,
			]),
			shouldThrow: false,
		},
		{
			name: 'hex',
			encoding: EncodingTypes.Hex,
			input: '5602ea95540bee46d03ba335eed6f49d117eab95c8ab8b71bae2cdd1e564a761',
			expected: new Uint8Array([
				0x56, 0x2, 0xea, 0x95, 0x54, 0xb, 0xee, 0x46, 0xd0, 0x3b, 0xa3, 0x35, 0xee, 0xd6, 0xf4, 0x9d, 0x11,
				0x7e, 0xab, 0x95, 0xc8, 0xab, 0x8b, 0x71, 0xba, 0xe2, 0xcd, 0xd1, 0xe5, 0x64, 0xa7, 0x61,
			]),
			shouldThrow: false,
		},
		{
			name: 'base58',
			encoding: EncodingTypes.Base58,
			input: '5CLmNK8f16nagFeF2h3iNeeChaxPiAsJu7piNYJgdPpmaRzPD',
			expected: new Uint8Array([
				0x9, 0x86, 0xc6, 0x71, 0x43, 0xad, 0x96, 0x6f, 0xa5, 0x79, 0xc9, 0x1b, 0x30, 0xc6, 0x7f, 0x95, 0xe7,
				0x4b, 0xcc, 0xe3, 0xc5, 0xec, 0xb9, 0x5c, 0x96, 0xbf, 0xb5, 0x82, 0x87, 0x65, 0x64, 0xe4, 0x9c, 0x8,
				0x3f, 0x1c,
			]),
			shouldThrow: false,
		},
		{
			name: 'unknown',
			encoding: 'unknown',
			input: '',
			expected: new Uint8Array(),
			shouldThrow: true,
		},
	];
	test.each(tests)('$name', async (test) => {
		if (test.shouldThrow) {
			expect(() => {
				Decode(test.encoding as EncodingType, test.input);
			}).toThrow();
		} else {
			expect(Decode(test.encoding as EncodingType, test.input)).toEqual(test.expected);
		}
	});
});
