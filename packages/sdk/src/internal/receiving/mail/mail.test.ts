import { AxiosInstance } from 'axios';
import { ED25519ExtendedPrivateKey, ED25519PrivateKey } from '@mailchain/crypto';
import { aliceKeyRing, bobKeyRing } from '@mailchain/keyring/test.const';
import { mock, MockProxy, mockReset } from 'jest-mock-extended';
import { PayloadReceiver, ReceivedPayload } from '../payload';
import { DeliveryRequests } from '../deliveryRequests';
import { PayloadOriginVerifier } from '../../transport/payload/verifier';

const mockAxios: MockProxy<AxiosInstance> = mock();
const mockDeliveryRequests: MockProxy<DeliveryRequests> = mock();
const mockPayloadOriginVerifier: MockProxy<PayloadOriginVerifier> = mock();

interface TestDetails {
	name: string;
	shouldThrow?: boolean;
	payloadRootEncryptionKey: ED25519ExtendedPrivateKey;
	initMock?: () => void;
	expected: ReceivedPayload;
}

describe('Receiving payload tests', () => {
	beforeEach(() => {
		mockReset(mockAxios);
		mockReset(mockDeliveryRequests);
	});
	const tests: TestDetails[] = [
		{
			name: 'alice receives messages',
			initMock: () => {
				mockAxios.get.mockResolvedValue({
					data: Buffer.from([
						1, 1, 0, 0, 1, 63, 43, 226, 181, 91, 0, 209, 101, 57, 100, 219, 38, 95, 90, 176, 176, 103, 144,
						26, 148, 14, 24, 98, 94, 166, 144, 145, 153, 216, 49, 190, 232, 242, 233, 89, 88, 193, 196, 78,
						63, 205, 177, 50, 231, 248, 0, 46, 1, 205, 59, 39, 21, 65, 37, 185, 49, 94, 115, 132, 79, 153,
						108, 209, 145, 101, 25, 189, 213, 22, 197, 84, 62, 251, 227, 194, 56, 215, 247, 130, 224, 35,
						211, 10, 6, 94, 47, 6, 113, 55, 138, 152, 224, 155, 133, 210, 168, 238, 251, 99, 192, 122, 211,
						38, 107, 3, 27, 92, 148, 31, 180, 33, 198, 20, 215, 160, 47, 200, 17, 46, 240, 77, 5, 155, 158,
						143, 59, 134, 52, 36, 145, 43, 224, 218, 59, 166, 33, 82, 245, 123, 239, 126, 21, 233, 139, 26,
						246, 201, 101, 126, 88, 118, 151, 18, 88, 19, 110, 103, 188, 227, 6, 29, 141, 208, 64, 138, 250,
						105, 113, 214, 152, 118, 157, 68, 193, 204, 250, 134, 226, 36, 92, 66, 102, 215, 254, 109, 221,
						18, 36, 35, 46, 172, 221, 66, 188, 113, 224, 194, 105, 29, 200, 10, 153, 98, 44, 126, 177, 227,
						100, 227, 208, 219, 172, 21, 134, 125, 101, 124, 190, 249, 212, 170, 218, 38, 182, 25, 59, 232,
						105, 240, 182, 196, 172, 50, 24, 198, 181, 17, 52, 31, 12, 57, 26, 255, 90, 80, 181, 193, 218,
						155, 212, 182, 188, 41, 40, 84, 58, 9, 228, 243, 173, 148, 205, 23, 96, 71, 247, 99, 155, 65,
						120, 81, 159, 21, 212, 96, 76, 78, 206, 253, 249, 167, 38, 242, 218, 193, 209, 165, 65, 174,
						218, 23, 47, 136, 72, 26, 31, 66, 239, 202, 114, 67, 20, 120, 103, 224, 104, 140, 138, 114, 153,
						245, 176, 75, 92, 6, 162, 101, 197, 45, 183, 3, 0, 0, 1, 181, 43, 226, 90, 65, 5, 137, 11, 198,
						167, 27, 86, 11, 15, 37, 121, 13, 203, 54, 184, 50, 80, 116, 1, 195, 226, 199, 8, 241, 185, 84,
						200, 93, 214, 178, 172, 244, 163, 83, 186, 247, 239, 240, 231, 151, 135, 254, 70, 142, 95, 87,
						88, 239, 95, 23, 93, 102, 184, 122, 99, 39, 117, 5, 79, 96, 166, 66, 116, 12, 156, 31, 124, 35,
						125, 54, 123, 15, 157, 158, 170, 215, 87, 93, 85, 236, 91, 75, 9, 78, 71, 180, 103, 109, 77,
						190, 14, 176, 8, 140, 252, 93, 102, 143, 152, 180, 171, 139, 72, 186, 51, 144, 8, 238, 191, 93,
						63, 154, 67, 84, 75, 56, 13, 127, 184, 165, 52, 151, 12, 16, 153, 235, 65, 165, 201, 165, 120,
						168, 209, 215, 63, 112, 38, 195, 128, 83, 252, 61, 78, 25, 241, 225, 87, 166, 85, 9, 126, 2, 43,
						185, 76, 173, 122, 156, 62, 194, 95, 67, 65, 2, 36, 91, 32, 229, 163, 199, 40, 159, 150, 35, 63,
						10, 153, 142, 246, 119, 168, 212, 159, 107, 76, 191, 43, 175, 85, 154, 228, 214, 80, 197, 166,
						45, 226, 241, 147, 31, 167, 254, 108, 150, 243, 180, 66, 167, 17, 56, 81, 9, 0, 40, 125, 124,
						146, 18, 164, 8, 6, 204, 166, 7, 95, 186, 65, 117, 20, 199, 210, 232, 217, 40, 92, 54, 180, 228,
						61, 3, 53, 175, 14, 160, 161, 253, 14, 154, 190, 173, 135, 55, 73, 2, 214, 183, 18, 197, 176,
						165, 36, 171, 234, 192, 51, 195, 255, 107, 151, 114, 136, 97, 94, 41, 182, 69, 73, 65, 242, 163,
						98, 59, 59, 60, 65, 188, 240, 30, 183, 46, 13, 52, 149, 179, 252, 109, 173, 169, 37, 175, 61,
						33, 113, 175, 223, 242, 124, 89, 235, 114, 55, 115, 47, 3, 90, 41, 124, 26, 202, 185, 217, 210,
						15, 3, 166, 222, 51, 245, 24, 109, 229, 60, 217, 75, 117, 5, 6, 249, 66, 203, 95, 65, 14, 12,
						135, 58, 156, 59, 119, 28, 36, 2, 145, 244, 205, 113, 93, 109, 40, 9, 49, 81, 249, 189, 7, 42,
						230, 180, 127, 138, 147, 11, 99, 34, 251, 162, 34, 189, 10, 242, 175, 213, 210, 174, 236, 231,
						0, 253, 26, 33, 109, 145, 135, 171, 46, 170, 54, 22, 85, 228, 179, 106, 35, 249, 25, 254, 219,
						233, 123, 83, 120, 80, 114, 79, 60, 43, 210, 8, 8, 3, 86, 131, 141, 5, 241, 104, 18, 188, 70,
						47, 43, 119, 207,
					]),
				});
			},
			payloadRootEncryptionKey: ED25519ExtendedPrivateKey.fromPrivateKey(
				ED25519PrivateKey.fromSecretKey(
					Uint8Array.from([
						78, 137, 46, 117, 36, 79, 240, 211, 46, 165, 198, 84, 140, 255, 38, 95, 235, 121, 115, 216, 195,
						196, 123, 185, 229, 233, 198, 194, 228, 232, 45, 166, 100, 165, 182, 109, 29, 160, 199, 39, 195,
						10, 213, 69, 101, 181, 112, 205, 121, 83, 92, 64, 76, 73, 241, 81, 215, 81, 88, 177, 64, 131,
						145, 79,
					]),
				),
			),
			expected: {
				status: 'ok',
				payload: {
					Content: Buffer.from([
						68, 97, 116, 101, 58, 32, 50, 48, 50, 50, 45, 48, 55, 45, 49, 51, 84, 49, 56, 58, 52, 52, 58,
						52, 56, 46, 53, 48, 55, 90, 13, 10, 70, 114, 111, 109, 58, 32, 34, 111, 108, 101, 107, 115, 105,
						105, 48, 48, 57, 49, 64, 109, 97, 105, 108, 99, 104, 97, 105, 110, 34, 32, 60, 111, 108, 101,
						107, 115, 105, 105, 48, 48, 57, 49, 64, 109, 97, 105, 108, 99, 104, 97, 105, 110, 46, 108, 111,
						99, 97, 108, 62, 13, 10, 84, 111, 58, 32, 34, 111, 108, 101, 107, 115, 105, 105, 48, 48, 57, 49,
						64, 109, 97, 105, 108, 99, 104, 97, 105, 110, 34, 32, 60, 111, 108, 101, 107, 115, 105, 105, 48,
						48, 57, 49, 64, 109, 97, 105, 108, 99, 104, 97, 105, 110, 46, 108, 111, 99, 97, 108, 62, 13, 10,
						67, 99, 58, 32, 13, 10, 77, 101, 115, 115, 97, 103, 101, 45, 73, 68, 58, 32, 50, 50, 56, 44, 51,
						49, 44, 49, 50, 54, 44, 49, 48, 48, 44, 56, 48, 44, 49, 53, 50, 44, 49, 48, 51, 44, 53, 54, 44,
						57, 44, 57, 50, 44, 53, 57, 44, 49, 56, 56, 44, 50, 51, 50, 44, 50, 52, 48, 44, 56, 57, 44, 49,
						55, 57, 44, 49, 54, 49, 44, 49, 51, 52, 44, 53, 51, 44, 50, 49, 48, 44, 49, 57, 53, 44, 50, 51,
						57, 44, 49, 51, 52, 44, 50, 52, 50, 44, 49, 53, 51, 44, 50, 53, 50, 44, 51, 54, 44, 49, 52, 56,
						44, 50, 51, 57, 44, 49, 50, 51, 44, 50, 51, 48, 44, 50, 53, 64, 109, 97, 105, 108, 99, 104, 97,
						105, 110, 46, 108, 111, 99, 97, 108, 13, 10, 83, 117, 98, 106, 101, 99, 116, 58, 32, 61, 63,
						117, 116, 102, 45, 56, 63, 66, 63, 100, 51, 70, 108, 63, 61, 13, 10, 77, 73, 77, 69, 45, 86,
						101, 114, 115, 105, 111, 110, 58, 32, 49, 46, 48, 10, 67, 111, 110, 116, 101, 110, 116, 45, 84,
						121, 112, 101, 58, 32, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114,
						115, 101, 116, 61, 85, 84, 70, 45, 56, 13, 10, 13, 10, 113, 119, 101,
					]),
					Headers: {
						ContentEncoding: 'base64/plain',
						ContentEncryption: 'nacl-secret-key',
						ContentLength: 395,
						ContentSignature: new Uint8Array([1, 3, 3, 7]),
						ContentType: 'message/x.mailchain',
						Created: new Date('2022-07-13T18:44:48.536Z'),
						Origin: aliceKeyRing.accountMessagingKey().publicKey,
					},
				},
			},
		},
		{
			name: 'bob receives user message',
			initMock: () => {
				mockAxios.get.mockResolvedValue({
					data: Buffer.from([
						1, 1, 0, 0, 1, 63, 43, 226, 107, 168, 40, 19, 236, 100, 15, 195, 154, 146, 86, 93, 68, 95, 77,
						132, 32, 171, 67, 48, 126, 76, 247, 56, 146, 155, 208, 216, 209, 237, 70, 11, 220, 187, 128,
						251, 43, 243, 229, 178, 173, 0, 66, 99, 59, 187, 198, 4, 58, 153, 168, 22, 51, 7, 167, 102, 62,
						108, 238, 86, 203, 176, 83, 147, 207, 58, 201, 68, 215, 29, 68, 23, 176, 152, 217, 168, 166,
						248, 227, 203, 188, 0, 211, 129, 30, 159, 96, 171, 203, 40, 62, 93, 213, 181, 29, 99, 20, 18,
						147, 198, 229, 234, 51, 210, 81, 18, 169, 66, 111, 19, 13, 14, 231, 189, 196, 123, 110, 37, 189,
						10, 207, 107, 29, 195, 124, 103, 156, 126, 4, 121, 6, 94, 122, 9, 174, 115, 167, 133, 87, 95,
						43, 33, 108, 174, 233, 216, 145, 193, 174, 27, 129, 69, 7, 135, 186, 142, 156, 123, 125, 96, 32,
						165, 134, 38, 29, 191, 156, 210, 44, 193, 159, 191, 201, 11, 239, 196, 30, 248, 244, 236, 172,
						250, 72, 181, 42, 148, 111, 206, 134, 96, 3, 26, 146, 241, 25, 197, 44, 248, 0, 168, 58, 41, 40,
						148, 174, 60, 216, 64, 176, 216, 234, 15, 17, 47, 66, 229, 78, 38, 49, 4, 151, 11, 53, 36, 21,
						196, 40, 210, 35, 141, 176, 105, 92, 103, 155, 128, 13, 252, 53, 49, 172, 37, 66, 74, 230, 117,
						114, 187, 204, 143, 67, 190, 77, 129, 67, 22, 120, 189, 132, 68, 213, 237, 239, 222, 229, 232,
						246, 190, 244, 252, 246, 237, 155, 210, 38, 252, 191, 117, 255, 91, 232, 149, 172, 27, 218, 49,
						67, 195, 76, 199, 55, 59, 239, 10, 127, 127, 177, 159, 35, 181, 111, 145, 158, 190, 109, 203,
						152, 184, 89, 216, 86, 156, 116, 198, 1, 183, 77, 3, 0, 0, 1, 181, 43, 226, 207, 166, 243, 171,
						10, 109, 197, 55, 122, 228, 11, 152, 80, 254, 83, 203, 94, 228, 197, 250, 196, 174, 162, 174,
						243, 64, 190, 140, 84, 5, 38, 130, 130, 60, 251, 154, 21, 185, 92, 177, 246, 228, 100, 248, 8,
						24, 51, 208, 143, 0, 3, 113, 247, 74, 134, 148, 158, 100, 17, 184, 228, 101, 73, 255, 17, 206,
						44, 132, 2, 21, 159, 176, 229, 49, 130, 227, 55, 61, 166, 92, 10, 121, 193, 130, 75, 84, 8, 246,
						167, 72, 204, 10, 28, 128, 254, 214, 241, 178, 235, 40, 26, 195, 43, 173, 13, 73, 254, 252, 6,
						5, 77, 120, 143, 226, 45, 110, 89, 137, 69, 50, 83, 136, 29, 146, 249, 56, 90, 113, 193, 30, 92,
						28, 251, 170, 91, 176, 51, 241, 133, 183, 184, 75, 202, 128, 235, 153, 110, 188, 240, 106, 133,
						102, 241, 1, 44, 41, 127, 71, 239, 34, 225, 185, 78, 153, 179, 230, 183, 128, 209, 88, 98, 181,
						221, 156, 191, 23, 51, 164, 97, 78, 149, 115, 66, 98, 219, 124, 21, 67, 43, 139, 49, 160, 199,
						94, 209, 32, 164, 101, 40, 125, 60, 193, 114, 8, 124, 116, 235, 75, 94, 139, 135, 206, 243, 2,
						76, 0, 143, 214, 111, 164, 161, 118, 169, 180, 224, 140, 183, 171, 189, 105, 232, 206, 219, 65,
						185, 170, 4, 219, 94, 238, 133, 202, 123, 9, 59, 203, 94, 109, 107, 150, 57, 44, 74, 222, 231,
						81, 144, 16, 111, 170, 101, 115, 32, 151, 11, 135, 82, 161, 155, 82, 226, 55, 49, 87, 7, 203,
						228, 43, 228, 99, 93, 154, 43, 73, 40, 60, 70, 97, 224, 175, 105, 7, 242, 35, 105, 14, 184, 16,
						200, 189, 200, 255, 170, 3, 13, 32, 95, 232, 19, 1, 146, 100, 228, 54, 114, 212, 75, 51, 230,
						192, 93, 34, 136, 51, 213, 203, 138, 110, 230, 125, 250, 65, 82, 137, 3, 105, 90, 93, 75, 169,
						124, 138, 240, 155, 8, 176, 28, 66, 134, 225, 150, 150, 230, 209, 115, 22, 10, 21, 55, 137, 19,
						116, 47, 102, 186, 29, 9, 232, 96, 90, 122, 77, 124, 242, 218, 8, 108, 49, 242, 47, 70, 114,
						148, 118, 103, 246, 194, 10, 167, 33, 220, 15, 5, 178, 35, 108, 141, 131, 187, 33, 13, 77, 96,
						220, 205, 165, 236, 32, 99, 135, 125, 90, 28, 22, 148, 40, 74, 181, 77, 13, 251, 19, 209, 121,
						153, 81, 250, 151, 204, 192, 52, 159, 109, 156, 125,
					]),
				});
			},
			payloadRootEncryptionKey: ED25519ExtendedPrivateKey.fromPrivateKey(
				ED25519PrivateKey.fromSecretKey(
					Uint8Array.from([
						49, 7, 6, 101, 195, 70, 52, 165, 18, 224, 51, 231, 45, 8, 17, 163, 213, 132, 179, 8, 170, 191,
						7, 122, 220, 180, 253, 167, 178, 13, 20, 230, 82, 122, 6, 226, 188, 163, 27, 7, 170, 171, 132,
						236, 81, 93, 86, 0, 83, 74, 90, 69, 242, 39, 16, 128, 250, 110, 184, 20, 171, 33, 18, 49,
					]),
				),
			),
			expected: {
				status: 'ok',
				payload: {
					Content: Buffer.from([
						68, 97, 116, 101, 58, 32, 50, 48, 50, 50, 45, 48, 55, 45, 49, 51, 84, 49, 56, 58, 52, 52, 58,
						52, 56, 46, 53, 48, 55, 90, 13, 10, 70, 114, 111, 109, 58, 32, 34, 111, 108, 101, 107, 115, 105,
						105, 48, 48, 57, 49, 64, 109, 97, 105, 108, 99, 104, 97, 105, 110, 34, 32, 60, 111, 108, 101,
						107, 115, 105, 105, 48, 48, 57, 49, 64, 109, 97, 105, 108, 99, 104, 97, 105, 110, 46, 108, 111,
						99, 97, 108, 62, 13, 10, 84, 111, 58, 32, 34, 111, 108, 101, 107, 115, 105, 105, 48, 48, 57, 49,
						64, 109, 97, 105, 108, 99, 104, 97, 105, 110, 34, 32, 60, 111, 108, 101, 107, 115, 105, 105, 48,
						48, 57, 49, 64, 109, 97, 105, 108, 99, 104, 97, 105, 110, 46, 108, 111, 99, 97, 108, 62, 13, 10,
						67, 99, 58, 32, 13, 10, 77, 101, 115, 115, 97, 103, 101, 45, 73, 68, 58, 32, 50, 50, 56, 44, 51,
						49, 44, 49, 50, 54, 44, 49, 48, 48, 44, 56, 48, 44, 49, 53, 50, 44, 49, 48, 51, 44, 53, 54, 44,
						57, 44, 57, 50, 44, 53, 57, 44, 49, 56, 56, 44, 50, 51, 50, 44, 50, 52, 48, 44, 56, 57, 44, 49,
						55, 57, 44, 49, 54, 49, 44, 49, 51, 52, 44, 53, 51, 44, 50, 49, 48, 44, 49, 57, 53, 44, 50, 51,
						57, 44, 49, 51, 52, 44, 50, 52, 50, 44, 49, 53, 51, 44, 50, 53, 50, 44, 51, 54, 44, 49, 52, 56,
						44, 50, 51, 57, 44, 49, 50, 51, 44, 50, 51, 48, 44, 50, 53, 64, 109, 97, 105, 108, 99, 104, 97,
						105, 110, 46, 108, 111, 99, 97, 108, 13, 10, 83, 117, 98, 106, 101, 99, 116, 58, 32, 61, 63,
						117, 116, 102, 45, 56, 63, 66, 63, 100, 51, 70, 108, 63, 61, 13, 10, 77, 73, 77, 69, 45, 86,
						101, 114, 115, 105, 111, 110, 58, 32, 49, 46, 48, 10, 67, 111, 110, 116, 101, 110, 116, 45, 84,
						121, 112, 101, 58, 32, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114,
						115, 101, 116, 61, 85, 84, 70, 45, 56, 13, 10, 13, 10, 113, 119, 101,
					]),
					Headers: {
						ContentEncoding: 'base64/plain',
						ContentEncryption: 'nacl-secret-key',
						ContentLength: 395,
						ContentSignature: new Uint8Array([1, 2, 3, 5]),
						ContentType: 'message/x.mailchain',
						Created: new Date('2022-07-13T18:44:48.536Z'),
						Origin: bobKeyRing.accountMessagingKey().publicKey,
					},
				},
			},
		},
	];

	test.each(tests)('$name', async (test) => {
		if (test.initMock) {
			test.initMock();
		}
		const receiver = new PayloadReceiver(mockAxios, mockDeliveryRequests, mockPayloadOriginVerifier);
		if (test.shouldThrow) {
			expect(() => {
				receiver.get(test.payloadRootEncryptionKey, 'http://example.com');
			}).toThrow();
		} else {
			const result = await receiver.get(test.payloadRootEncryptionKey, 'http://example.com');

			expect(result).toEqual(test.expected);
		}
	});
});
