import { toUtf8Bytes } from '@ethersproject/strings';
import {
	AliceUncompressedSECP256K1PublicKeyBytes,
	AliceCompressedSECP256K1PublicKeyBytes,
	BobUncompressedSECP256K1PublicKeyBytes,
	BobCompressedSECP256K1PublicKeyBytes,
	BobSECP256K1PublicKey,
	AliceSECP256K1PublicKey,
} from './test.const';
import { SECP256K1PublicKey } from './';

describe('new()', () => {
	const tests = [
		{
			name: 'alice-uncompressed',
			arg: AliceUncompressedSECP256K1PublicKeyBytes,
			expected: {
				curve: 'secp256k1',
				bytes: AliceCompressedSECP256K1PublicKeyBytes,
			} as SECP256K1PublicKey,
			shouldThrow: false,
		},
		{
			name: 'alice-compressed',
			arg: AliceCompressedSECP256K1PublicKeyBytes,
			expected: {
				curve: 'secp256k1',
				bytes: AliceCompressedSECP256K1PublicKeyBytes,
			} as SECP256K1PublicKey,
			shouldThrow: false,
		},
		{
			name: 'bob-uncompressed',
			arg: BobUncompressedSECP256K1PublicKeyBytes,
			expected: {
				curve: 'secp256k1',
				bytes: BobCompressedSECP256K1PublicKeyBytes,
			} as SECP256K1PublicKey,
			shouldThrow: false,
		},
		{
			name: 'bob-compressed',
			arg: BobCompressedSECP256K1PublicKeyBytes,
			expected: {
				curve: 'secp256k1',
				bytes: BobCompressedSECP256K1PublicKeyBytes,
			} as SECP256K1PublicKey,
			shouldThrow: false,
		},
		{
			name: 'invalid',
			arg: new Uint8Array([3, 189, 246]),
			expected: null,
			shouldThrow: true,
		},
	];
	test.each(tests)('$name', async (test) => {
		if (test.shouldThrow) {
			expect(() => {
				new SECP256K1PublicKey(test.arg);
			}).toThrow();
		} else {
			expect(new SECP256K1PublicKey(test.arg)).toEqual(test.expected);
		}
	});
});

describe('verify()', () => {
	const tests = [
		{
			name: 'bob-with-recid',
			pubKey: BobSECP256K1PublicKey,
			message: new Uint8Array(Buffer.from('message', 'ascii')),
			sig: new Uint8Array([
				0x19, 0x32, 0x26, 0x3f, 0xda, 0x32, 0x74, 0x0a, 0xa9, 0x09, 0xd1, 0x85, 0x68, 0x1f, 0x82, 0xad, 0xb5,
				0xa8, 0x8e, 0xa8, 0xa4, 0x26, 0xc3, 0x59, 0x3a, 0x85, 0x74, 0x53, 0x93, 0x5b, 0x94, 0xe4, 0x34, 0xcc,
				0xcb, 0x6d, 0xff, 0x3a, 0xce, 0xe7, 0xa2, 0x92, 0x78, 0xd0, 0x82, 0xe5, 0x60, 0x70, 0x9f, 0xe2, 0xea,
				0x30, 0x2b, 0x3a, 0xc2, 0x02, 0xcb, 0x43, 0x89, 0x2b, 0x87, 0x9a, 0xe5, 0x55, 0x00,
			]),
			expected: true,
			shouldThrow: false,
		},
		{
			name: 'success-bob-without-recid',
			pubKey: BobSECP256K1PublicKey,
			message: new Uint8Array(Buffer.from('message', 'ascii')),
			sig: new Uint8Array([
				0x19, 0x32, 0x26, 0x3f, 0xda, 0x32, 0x74, 0x0a, 0xa9, 0x09, 0xd1, 0x85, 0x68, 0x1f, 0x82, 0xad, 0xb5,
				0xa8, 0x8e, 0xa8, 0xa4, 0x26, 0xc3, 0x59, 0x3a, 0x85, 0x74, 0x53, 0x93, 0x5b, 0x94, 0xe4, 0x34, 0xcc,
				0xcb, 0x6d, 0xff, 0x3a, 0xce, 0xe7, 0xa2, 0x92, 0x78, 0xd0, 0x82, 0xe5, 0x60, 0x70, 0x9f, 0xe2, 0xea,
				0x30, 0x2b, 0x3a, 0xc2, 0x02, 0xcb, 0x43, 0x89, 0x2b, 0x87, 0x9a, 0xe5, 0x55,
			]),
			expected: true,
			shouldThrow: false,
		},
		{
			name: 'success-alice-with-recid',
			pubKey: AliceSECP256K1PublicKey,
			message: new Uint8Array(Buffer.from('egassem', 'ascii')),
			sig: new Uint8Array([
				0xfb, 0xbc, 0xa9, 0xd5, 0x02, 0x5a, 0x03, 0x8e, 0xfc, 0xac, 0x1b, 0xe0, 0x4f, 0x0a, 0x96, 0x19, 0x6e,
				0x1f, 0x0e, 0x15, 0xd7, 0xf6, 0xb7, 0x17, 0xb0, 0xc3, 0x0a, 0xae, 0xbd, 0xef, 0x5b, 0x28, 0x3c, 0x6d,
				0x6b, 0x97, 0xbf, 0xf2, 0x87, 0x14, 0x86, 0x47, 0x41, 0x37, 0x06, 0x87, 0xc9, 0x55, 0x5a, 0x61, 0xc4,
				0xfe, 0xbc, 0xaf, 0x3d, 0xd9, 0x78, 0x98, 0xa1, 0x31, 0xe3, 0x78, 0x97, 0x85, 0x01,
			]),
			expected: true,
			shouldThrow: false,
		},
		{
			name: 'success-alice-without-recid',
			pubKey: AliceSECP256K1PublicKey,
			message: new Uint8Array(Buffer.from('egassem', 'ascii')),
			sig: new Uint8Array([
				0xfb, 0xbc, 0xa9, 0xd5, 0x02, 0x5a, 0x03, 0x8e, 0xfc, 0xac, 0x1b, 0xe0, 0x4f, 0x0a, 0x96, 0x19, 0x6e,
				0x1f, 0x0e, 0x15, 0xd7, 0xf6, 0xb7, 0x17, 0xb0, 0xc3, 0x0a, 0xae, 0xbd, 0xef, 0x5b, 0x28, 0x3c, 0x6d,
				0x6b, 0x97, 0xbf, 0xf2, 0x87, 0x14, 0x86, 0x47, 0x41, 0x37, 0x06, 0x87, 0xc9, 0x55, 0x5a, 0x61, 0xc4,
				0xfe, 0xbc, 0xaf, 0x3d, 0xd9, 0x78, 0x98, 0xa1, 0x31, 0xe3, 0x78, 0x97, 0x85,
			]),
			expected: true,
			shouldThrow: false,
		},
		{
			name: 'err-invalid-signature-bob',
			pubKey: BobSECP256K1PublicKey,
			message: new Uint8Array(Buffer.from('message', 'ascii')),
			sig: new Uint8Array([
				0xfb, 0xbc, 0xa9, 0xd5, 0x02, 0x5a, 0x03, 0x8e, 0xfc, 0xac, 0x1b, 0xe0, 0x4f, 0x0a, 0x96, 0x19, 0x6e,
				0x1f, 0x0e, 0x15, 0xd7, 0xf6, 0xb7, 0x17, 0xb0, 0xc3, 0x0a, 0xae, 0xbd, 0xef, 0x5b, 0x28, 0x3c, 0x6d,
				0x6b, 0x97, 0xbf, 0xf2, 0x87, 0x14, 0x86, 0x47, 0x41, 0x37, 0x06, 0x87, 0xc9, 0x55, 0x5a, 0x61, 0xc4,
				0xfe, 0xbc, 0xaf, 0x3d, 0xd9, 0x78, 0x98, 0xa1, 0x31, 0xe3, 0x78, 0x97, 0x85, 0x01,
			]),
			expected: false,
			shouldThrow: false,
		},
		{
			name: 'err-invalid-signature-alice',
			pubKey: AliceSECP256K1PublicKey,
			message: new Uint8Array(Buffer.from('message', 'ascii')),
			sig: new Uint8Array([
				0xcf, 0x44, 0x7f, 0xc1, 0xd4, 0x6f, 0xd, 0xe2, 0xd4, 0xfc, 0x5c, 0x18, 0x5a, 0x7e, 0x89, 0xba, 0x5e,
				0xca, 0x16, 0x68, 0xca, 0x73, 0xa3, 0x4d, 0x43, 0xf1, 0x8d, 0xa2, 0x45, 0xf1, 0xd1, 0xd7, 0x6f, 0x8f,
				0x6e, 0xd1, 0x7c, 0x8c, 0xdf, 0x95, 0xd8, 0x46, 0xea, 0x8d, 0x5e, 0xa1, 0x50, 0x8f, 0x97, 0x18, 0xd7,
				0xfe, 0x1a, 0x99, 0x69, 0x3b, 0x50, 0xe8, 0x9a, 0x30, 0x9c, 0x41, 0x2c, 0xb0, 0x1,
			]),
			expected: false,
			shouldThrow: false,
		},
		{
			name: 'err-invalid-signature',
			pubKey: AliceSECP256K1PublicKey,
			message: new Uint8Array(Buffer.from('message', 'ascii')),
			sig: new Uint8Array([0xd]),
			expected: false,
			shouldThrow: true,
		},
	];
	test.each(tests)('$name', async (test) => {
		if (test.shouldThrow) {
			expect.assertions(1);
			return test.pubKey.verify(test.message, test.sig).catch((e) => expect(e).toBeDefined());
		}
		return test.pubKey.verify(test.message, test.sig).then((actual) => {
			expect(actual).toEqual(test.expected);
		});
	});
});

describe('FromSignature', () => {
	const tests = [
		{
			name: 'alice-with-recid',
			message: toUtf8Bytes('egassem'),
			signature: new Uint8Array([
				0xfb, 0xbc, 0xa9, 0xd5, 0x02, 0x5a, 0x03, 0x8e, 0xfc, 0xac, 0x1b, 0xe0, 0x4f, 0x0a, 0x96, 0x19, 0x6e,
				0x1f, 0x0e, 0x15, 0xd7, 0xf6, 0xb7, 0x17, 0xb0, 0xc3, 0x0a, 0xae, 0xbd, 0xef, 0x5b, 0x28, 0x3c, 0x6d,
				0x6b, 0x97, 0xbf, 0xf2, 0x87, 0x14, 0x86, 0x47, 0x41, 0x37, 0x06, 0x87, 0xc9, 0x55, 0x5a, 0x61, 0xc4,
				0xfe, 0xbc, 0xaf, 0x3d, 0xd9, 0x78, 0x98, 0xa1, 0x31, 0xe3, 0x78, 0x97, 0x85, 0x01,
			]),
			expected: AliceSECP256K1PublicKey,
			shouldThrow: false,
		},
		{
			name: 'bob-with-recid',
			message: toUtf8Bytes('message'),
			signature: new Uint8Array([
				0x19, 0x32, 0x26, 0x3f, 0xda, 0x32, 0x74, 0x0a, 0xa9, 0x09, 0xd1, 0x85, 0x68, 0x1f, 0x82, 0xad, 0xb5,
				0xa8, 0x8e, 0xa8, 0xa4, 0x26, 0xc3, 0x59, 0x3a, 0x85, 0x74, 0x53, 0x93, 0x5b, 0x94, 0xe4, 0x34, 0xcc,
				0xcb, 0x6d, 0xff, 0x3a, 0xce, 0xe7, 0xa2, 0x92, 0x78, 0xd0, 0x82, 0xe5, 0x60, 0x70, 0x9f, 0xe2, 0xea,
				0x30, 0x2b, 0x3a, 0xc2, 0x02, 0xcb, 0x43, 0x89, 0x2b, 0x87, 0x9a, 0xe5, 0x55, 0x00,
			]),
			expected: BobSECP256K1PublicKey,
			shouldThrow: false,
		},
		{
			name: 'alice-without-recid',
			message: toUtf8Bytes('message'),
			signature: new Uint8Array([
				0xfb, 0xbc, 0xa9, 0xd5, 0x02, 0x5a, 0x03, 0x8e, 0xfc, 0xac, 0x1b, 0xe0, 0x4f, 0x0a, 0x96, 0x19, 0x6e,
				0x1f, 0x0e, 0x15, 0xd7, 0xf6, 0xb7, 0x17, 0xb0, 0xc3, 0x0a, 0xae, 0xbd, 0xef, 0x5b, 0x28, 0x3c, 0x6d,
				0x6b, 0x97, 0xbf, 0xf2, 0x87, 0x14, 0x86, 0x47, 0x41, 0x37, 0x06, 0x87, 0xc9, 0x55, 0x5a, 0x61, 0xc4,
				0xfe, 0xbc, 0xaf, 0x3d, 0xd9, 0x78, 0x98, 0xa1, 0x31, 0xe3, 0x78, 0x97, 0x85,
			]),
			expected: null,
			shouldThrow: true,
		},
		{
			name: 'bob-without-recid',
			message: toUtf8Bytes('message'),
			signature: new Uint8Array([
				0x19, 0x32, 0x26, 0x3f, 0xda, 0x32, 0x74, 0x0a, 0xa9, 0x09, 0xd1, 0x85, 0x68, 0x1f, 0x82, 0xad, 0xb5,
				0xa8, 0x8e, 0xa8, 0xa4, 0x26, 0xc3, 0x59, 0x3a, 0x85, 0x74, 0x53, 0x93, 0x5b, 0x94, 0xe4, 0x34, 0xcc,
				0xcb, 0x6d, 0xff, 0x3a, 0xce, 0xe7, 0xa2, 0x92, 0x78, 0xd0, 0x82, 0xe5, 0x60, 0x70, 0x9f, 0xe2, 0xea,
				0x30, 0x2b, 0x3a, 0xc2, 0x02, 0xcb, 0x43, 0x89, 0x2b, 0x87, 0x9a, 0xe5, 0x55,
			]),
			expected: null,
			shouldThrow: true,
		},
	];
	test.each(tests)('$name', async (test) => {
		if (test.shouldThrow) {
			expect.assertions(1);
			return SECP256K1PublicKey.fromSignature(test.message, test.signature).catch((e) => expect(e).toBeDefined());
		}
		return SECP256K1PublicKey.fromSignature(test.message, test.signature).then((actual) => {
			expect(actual).toEqual(test.expected);
		});
	});
});
