import {
	AliceED25519PublicKeyBytes,
	BobED25519PublicKeyBytes,
	AliceED25519PublicKey,
	BobED25519PublicKey,
} from './test.const';
import { ED25519PublicKey } from './';

describe('new()', () => {
	const tests = [
		{
			name: 'alice',
			arg: AliceED25519PublicKeyBytes,
			expected: {
				curve: 'ed25519',
				bytes: AliceED25519PublicKeyBytes,
			} as ED25519PublicKey,
			shouldThrow: false,
		},
		{
			name: 'bob-uncompressed',
			arg: BobED25519PublicKeyBytes,
			expected: {
				curve: 'ed25519',
				bytes: BobED25519PublicKeyBytes,
			} as ED25519PublicKey,
			shouldThrow: false,
		},
		{
			name: 'invalid',
			arg: new Uint8Array([3, 189, 246]),
			expected: null,
			shouldThrow: true,
		},
	];
	tests.forEach((test) => {
		it(test.name, () => {
			if (test.shouldThrow) {
				expect(() => {
					new ED25519PublicKey(test.arg);
				}).toThrow();
			} else {
				expect(new ED25519PublicKey(test.arg)).toEqual(test.expected);
			}
		});
	});
});

describe('verify()', () => {
	const tests = [
		{
			name: 'alice',
			pubKey: AliceED25519PublicKey,
			message: new Uint8Array(Buffer.from('egassem', 'ascii')),
			sig: new Uint8Array([
				0xde, 0x6c, 0x88, 0xe6, 0x9c, 0x9f, 0x93, 0xb, 0x59, 0xdd, 0xf4, 0x80, 0xc2, 0x9a, 0x55, 0x79, 0xec,
				0x89, 0x5c, 0xa9, 0x7a, 0x36, 0xf6, 0x69, 0x74, 0xc1, 0xf0, 0x15, 0x5c, 0xc0, 0x66, 0x75, 0x2e, 0xcd,
				0x9a, 0x9b, 0x41, 0x35, 0xd2, 0x72, 0x32, 0xe0, 0x54, 0x80, 0xbc, 0x98, 0x58, 0x1, 0xa9, 0xfd, 0xe4,
				0x27, 0xc7, 0xef, 0xa5, 0x42, 0x5f, 0xf, 0x46, 0x49, 0xb8, 0xad, 0xbd, 0x5,
			]),
			expected: true,
			shouldThrow: false,
		},
		{
			name: 'bob',
			pubKey: BobED25519PublicKey,
			message: new Uint8Array(Buffer.from('message', 'ascii')),
			sig: new Uint8Array([
				0x7d, 0x51, 0xea, 0xfa, 0x52, 0x78, 0x31, 0x69, 0xd0, 0xa9, 0x4a, 0xc, 0x9f, 0x2b, 0xca, 0xd5, 0xe0,
				0x3d, 0x29, 0x17, 0x33, 0x0, 0x93, 0xf, 0xf3, 0xc7, 0xd6, 0x3b, 0xfd, 0x64, 0x17, 0xae, 0x1b, 0xc8,
				0x1f, 0xef, 0x51, 0xba, 0x14, 0x9a, 0xe8, 0xa1, 0xe1, 0xda, 0xe0, 0x5f, 0xdc, 0xa5, 0x7, 0x8b, 0x14,
				0xba, 0xc4, 0xcf, 0x26, 0xcc, 0xc6, 0x1, 0x1e, 0x5e, 0xab, 0x77, 0x3, 0xc,
			]),
			expected: true,
			shouldThrow: false,
		},
		{
			name: 'err-invalid-signature-alice',
			pubKey: AliceED25519PublicKey,
			message: new Uint8Array(Buffer.from('message', 'ascii')),
			sig: new Uint8Array([
				0x7d, 0x51, 0xea, 0xfa, 0x52, 0x78, 0x31, 0x69, 0xd0, 0xa9, 0x4a, 0xc, 0x9f, 0x2b, 0xca, 0xd5, 0xe0,
				0x3d, 0x29, 0x17, 0x33, 0x0, 0x93, 0xf, 0xf3, 0xc7, 0xd6, 0x3b, 0xfd, 0x64, 0x17, 0xae, 0x1b, 0xc8,
				0x1f, 0xef, 0x51, 0xba, 0x14, 0x9a, 0xe8, 0xa1, 0xe1, 0xda, 0xe0, 0x5f, 0xdc, 0xa5, 0x7, 0x8b, 0x14,
				0xba, 0xc4, 0xcf, 0x26, 0xcc, 0xc6, 0x1, 0x1e, 0x5e, 0xab, 0x77, 0x3, 0xc,
			]),
			expected: false,
			shouldThrow: false,
		},
		{
			name: 'err-invalid-signature-bob',
			pubKey: BobED25519PublicKey,
			message: new Uint8Array(Buffer.from('message', 'ascii')),
			sig: new Uint8Array([
				0xde, 0x6c, 0x88, 0xe6, 0x9c, 0x9f, 0x93, 0xb, 0x59, 0xdd, 0xf4, 0x80, 0xc2, 0x9a, 0x55, 0x79, 0xec,
				0x89, 0x5c, 0xa9, 0x7a, 0x36, 0xf6, 0x69, 0x74, 0xc1, 0xf0, 0x15, 0x5c, 0xc0, 0x66, 0x75, 0x2e, 0xcd,
				0x9a, 0x9b, 0x41, 0x35, 0xd2, 0x72, 0x32, 0xe0, 0x54, 0x80, 0xbc, 0x98, 0x58, 0x1, 0xa9, 0xfd, 0xe4,
				0x27, 0xc7, 0xef, 0xa5, 0x42, 0x5f, 0xf, 0x46, 0x49, 0xb8, 0xad, 0xbd, 0x5,
			]),
			expected: false,
			shouldThrow: false,
		},
		{
			name: 'err-invalid-signature',
			pubKey: AliceED25519PublicKey,
			message: new Uint8Array(Buffer.from('message', 'ascii')),
			sig: new Uint8Array([0xd]),
			expected: false,
			shouldThrow: true,
		},
	];
	tests.forEach((test) => {
		it(test.name, () => {
			if (test.shouldThrow) {
				expect.assertions(1);
				return test.pubKey.verify(test.message, test.sig).catch((e) => expect(e).toBeDefined());
			}
			return test.pubKey.verify(test.message, test.sig).then((actual) => {
				expect(actual).toEqual(test.expected);
			});
		});
	});
});
